{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonminsong/developer/Three.js/portfolio-inner-site/src/components/wordle/Wordle.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport WORDS from './Words';\nimport { Easing } from '../general/Animation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst KeyboardLetter = _ref => {\n  _s();\n\n  let {\n    letter,\n    guesses,\n    word,\n    currentGuess,\n    setGuesses,\n    setCurrentGuess\n  } = _ref;\n  const [isInWord, setIsInWord] = useState(false);\n  const [isInPlace, setIsInPlace] = useState(false);\n  const [notInWord, setNotInWord] = useState(false);\n  useEffect(() => {\n    guesses.forEach(guess => {\n      if (word.includes(letter) && guess.includes(letter)) {\n        setIsInWord(true);\n\n        if (word.indexOf(letter) === guess.indexOf(letter)) {\n          setIsInPlace(true);\n        }\n      }\n\n      if (!word.includes(letter) && guess.includes(letter)) {\n        setNotInWord(true);\n      }\n    });\n\n    if (guesses.length === 0) {\n      setIsInPlace(false);\n      setIsInWord(false);\n      setNotInWord(false);\n    }\n  }, [guesses, letter, word]);\n\n  const handleClick = () => {\n    if (letter === 'RET') {\n      if (currentGuess.length === word.length) {\n        if (WORDS.includes(currentGuess.toLowerCase())) {\n          setGuesses([...guesses, currentGuess]);\n          setCurrentGuess('');\n        }\n      }\n    } else if (letter === 'DEL') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (currentGuess.length < word.length) {\n      setCurrentGuess(currentGuess + letter.toUpperCase());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseDown: handleClick,\n    className: \"site-button\",\n    style: Object.assign({}, styles.letterBox, isInWord && {\n      backgroundColor: 'yellow'\n    }, isInPlace && {\n      backgroundColor: 'lightgreen'\n    }, notInWord && {\n      backgroundColor: 'gray'\n    }),\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: letter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(KeyboardLetter, \"wzWJhQPMUJIhLg1zkIyghN++/cE=\");\n\n_c = KeyboardLetter;\n\nconst GuessLetter = _ref2 => {\n  _s2();\n\n  let {\n    guessed,\n    letter,\n    guess,\n    word\n  } = _ref2;\n  const [isInWord, setIsInWord] = useState(false);\n  const [isInPlace, setIsInPlace] = useState(false);\n  useEffect(() => {\n    if (guessed) {\n      if (word.includes(letter)) {\n        setIsInWord(true);\n\n        if (word.indexOf(letter) === guess.indexOf(letter)) {\n          setIsInPlace(true);\n        }\n      }\n    }\n  }, [guessed, guess, letter, word]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"button-border\",\n    style: Object.assign({}, styles.guessLetterBox, isInWord && {\n      backgroundColor: 'yellow'\n    }, isInPlace && {\n      backgroundColor: 'lightgreen'\n    }, !guessed && {\n      backgroundColor: 'white'\n    }, letter === ' ' && styles.emptyBox),\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: letter.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(GuessLetter, \"BPwuivUlz4j4BXZZXLGEYD3ubKI=\");\n\n_c2 = GuessLetter;\n\nconst GuessWord = _ref3 => {\n  _s3();\n\n  let {\n    guess,\n    guesses,\n    word,\n    active,\n    noClear\n  } = _ref3;\n  const [savedGuess, setSavedGuess] = useState(guess);\n  const controls = useAnimation();\n  useEffect(() => {\n    if (active) {\n      setSavedGuess(guess);\n\n      if (guess.length === word.length && !WORDS.includes(guess.toLowerCase())) {\n        controls.start({\n          backgroundColor: '#f00',\n          x: 2,\n          transition: {\n            duration: 0.1\n          }\n        }).then(() => {\n          controls.start({\n            x: -4,\n            backgroundColor: '#fff',\n            transition: {\n              duration: 0.1\n            }\n          }).then(() => {\n            controls.start({\n              x: 0,\n              backgroundColor: '#fff',\n              transition: {\n                duration: 0.09\n              }\n            });\n          });\n        });\n      }\n    }\n  }, [guess, active, word, controls]);\n  useEffect(() => {\n    if (guesses.length === 0 && !noClear) setSavedGuess('');\n  }, [guesses, noClear]);\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    animate: controls,\n    style: styles.guessWordRow,\n    children: [savedGuess.split('').map((letter, index) => /*#__PURE__*/_jsxDEV(GuessLetter, {\n      guessed: !active,\n      letter: letter,\n      guess: savedGuess,\n      word: word\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this)), [...Array(word.length - savedGuess.length)].map((e, i) => /*#__PURE__*/_jsxDEV(GuessLetter, {\n      guessed: !active,\n      letter: ' ',\n      guess: savedGuess,\n      word: word\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(GuessWord, \"4wUjD09Uxj9guC+2pU1RUGfmrUc=\", false, function () {\n  return [useAnimation];\n});\n\n_c3 = GuessWord;\nconst TOP_ROW = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'];\nconst MIDDLE_ROW = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'];\nconst BOTTOM_ROW = ['RET', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'DEL'];\nconst ROWS = [TOP_ROW, MIDDLE_ROW, BOTTOM_ROW];\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nconst Wordle = () => {\n  _s4();\n\n  const word = 'LUKE';\n  const [guesses, setGuesses] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [won, setWon] = useState(false);\n  const [currentGuess, setCurrentGuess] = useState('');\n\n  const restart = () => {\n    setGuesses([]);\n    setGameOver(false);\n    setTimeout(() => {\n      setWon(false);\n    }, 500);\n    setCurrentGuess('');\n  }; // listen to keyboard events\n\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === 'Backspace') {\n        setCurrentGuess(currentGuess.slice(0, -1));\n      } else if (event.key === 'Enter') {\n        if (currentGuess.length === word.length) {\n          if (WORDS.includes(currentGuess.toLowerCase())) {\n            setGuesses([...guesses, currentGuess]);\n            setCurrentGuess('');\n          }\n        }\n      } else if (event.key.length === 1 && ALPHABET.includes(event.key.toUpperCase())) {\n        if (currentGuess.length < word.length) {\n          setCurrentGuess(currentGuess + event.key.toUpperCase());\n        }\n      }\n    }; // add listener\n\n\n    window.addEventListener('keydown', handleKeyDown); // cleanup listener\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [guesses, currentGuess]);\n  useEffect(() => {\n    if (guesses.length === 6) {\n      setGameOver(true);\n    }\n\n    guesses.forEach(guess => {\n      if (guess === word) {\n        setGameOver(true);\n        setWon(true);\n      }\n    });\n  }, [guesses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Henordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wordle but with a Luke based twist.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      variants: gameOverAnimations,\n      animate: gameOver ? 'show' : 'hidden',\n      initial: false,\n      style: Object.assign({}, styles.gameOverContainer, gameOver && {\n        zIndex: 1000\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: won ? 'You win!' : 'Game Over'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thanks for playing! Remember: the word is always \\\"LUKE\\\"!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GuessWord, {\n        guess: word,\n        word: word,\n        guesses: guesses,\n        active: false,\n        noClear: true\n      }, 'winning-guess', false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"site-button\",\n        onMouseDown: restart,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      variants: gameAnimations,\n      animate: !gameOver ? 'show' : 'hidden',\n      initial: false,\n      style: styles.gameContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.playArea,\n        children: [...Array(6)].map((e, i) => /*#__PURE__*/_jsxDEV(GuessWord, {\n          guess: currentGuess,\n          word: word,\n          guesses: guesses,\n          active: i === guesses.length\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.keyboardContainer,\n        children: ROWS.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.keyboardRow,\n          children: row.map(letter => /*#__PURE__*/_jsxDEV(KeyboardLetter, {\n            word: word,\n            setGuesses: setGuesses,\n            guesses: guesses,\n            letter: letter,\n            currentGuess: currentGuess,\n            setCurrentGuess: setCurrentGuess\n          }, letter, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 33\n          }, this))\n        }, `row-${row[0]}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n};\n\n_s4(Wordle, \"yg2t6zqLqKKoZfCsMBxmPZF8V/c=\");\n\n_c4 = Wordle;\nconst gameAnimations = {\n  hidden: {\n    opacity: 0,\n    y: -12,\n    transition: {\n      duration: 0.5\n    }\n  },\n  show: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      delay: 0.5,\n      duration: 0.5\n    }\n  }\n};\nconst gameOverAnimations = {\n  hidden: {\n    opacity: 0,\n    y: 32,\n    transition: {\n      duration: 0.5\n    }\n  },\n  show: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      delay: 0.4,\n      duration: 0.5,\n      ease: Easing.expOut\n    }\n  }\n};\nconst styles = {\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    overflowY: 'scroll'\n  },\n  gameContainer: {\n    flex: 1,\n    flexDirection: 'column'\n  },\n  gameOverContainer: {\n    zIndex: -1000,\n    textAlign: 'center',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff'\n  },\n  header: {\n    flexShrink: 1,\n    paddingTop: 32,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  keyboardContainer: {\n    flexShrink: 1,\n    paddingBottom: 24,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  playArea: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 16,\n    marginBottom: 16\n  },\n  letterBox: {\n    padding: 12,\n    paddingTop: 16,\n    minWidth: 42,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingBottom: 16,\n    margin: 4\n  },\n  keyboardRow: {},\n  guessLetterBox: {\n    width: 60,\n    height: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 4\n  },\n  guessWordRow: {},\n  emptyBox: {\n    border: '2px solid gray',\n    backgroundColor: 'white',\n    boxShadow: 'none'\n  }\n};\nexport default Wordle;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"KeyboardLetter\");\n$RefreshReg$(_c2, \"GuessLetter\");\n$RefreshReg$(_c3, \"GuessWord\");\n$RefreshReg$(_c4, \"Wordle\");","map":{"version":3,"sources":["/Users/hyeonminsong/developer/Three.js/portfolio-inner-site/src/components/wordle/Wordle.tsx"],"names":["React","useEffect","useState","motion","useAnimation","WORDS","Easing","KeyboardLetter","letter","guesses","word","currentGuess","setGuesses","setCurrentGuess","isInWord","setIsInWord","isInPlace","setIsInPlace","notInWord","setNotInWord","forEach","guess","includes","indexOf","length","handleClick","toLowerCase","slice","toUpperCase","Object","assign","styles","letterBox","backgroundColor","GuessLetter","guessed","guessLetterBox","emptyBox","GuessWord","active","noClear","savedGuess","setSavedGuess","controls","start","x","transition","duration","then","guessWordRow","split","map","index","Array","e","i","TOP_ROW","MIDDLE_ROW","BOTTOM_ROW","ROWS","ALPHABET","Wordle","gameOver","setGameOver","won","setWon","restart","setTimeout","handleKeyDown","event","key","window","addEventListener","removeEventListener","container","header","gameOverAnimations","gameOverContainer","zIndex","gameAnimations","gameContainer","playArea","keyboardContainer","row","keyboardRow","hidden","opacity","y","show","delay","ease","expOut","flex","flexDirection","overflowY","textAlign","width","height","position","justifyContent","alignItems","flexShrink","paddingTop","paddingBottom","marginTop","marginBottom","padding","minWidth","margin","border","boxShadow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport WORDS from './Words';\nimport { Easing } from '../general/Animation';\n\nexport interface KeyboardLetterProps {\n    letter: string;\n    word: string;\n    guesses: string[];\n    currentGuess: string;\n    setGuesses: React.Dispatch<React.SetStateAction<string[]>>;\n    setCurrentGuess: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst KeyboardLetter: React.FC<KeyboardLetterProps> = ({\n    letter,\n    guesses,\n    word,\n    currentGuess,\n    setGuesses,\n    setCurrentGuess,\n}) => {\n    const [isInWord, setIsInWord] = useState(false);\n    const [isInPlace, setIsInPlace] = useState(false);\n    const [notInWord, setNotInWord] = useState(false);\n\n    useEffect(() => {\n        guesses.forEach((guess) => {\n            if (word.includes(letter) && guess.includes(letter)) {\n                setIsInWord(true);\n                if (word.indexOf(letter) === guess.indexOf(letter)) {\n                    setIsInPlace(true);\n                }\n            }\n            if (!word.includes(letter) && guess.includes(letter)) {\n                setNotInWord(true);\n            }\n        });\n        if (guesses.length === 0) {\n            setIsInPlace(false);\n            setIsInWord(false);\n            setNotInWord(false);\n        }\n    }, [guesses, letter, word]);\n\n    const handleClick = () => {\n        if (letter === 'RET') {\n            if (currentGuess.length === word.length) {\n                if (WORDS.includes(currentGuess.toLowerCase())) {\n                    setGuesses([...guesses, currentGuess]);\n                    setCurrentGuess('');\n                }\n            }\n        } else if (letter === 'DEL') {\n            setCurrentGuess(currentGuess.slice(0, -1));\n        } else if (currentGuess.length < word.length) {\n            setCurrentGuess(currentGuess + letter.toUpperCase());\n        }\n    };\n\n    return (\n        <div\n            onMouseDown={handleClick}\n            className=\"site-button\"\n            style={Object.assign(\n                {},\n                styles.letterBox,\n                isInWord && { backgroundColor: 'yellow' },\n                isInPlace && { backgroundColor: 'lightgreen' },\n                notInWord && { backgroundColor: 'gray' }\n            )}\n        >\n            <p>{letter}</p>\n        </div>\n    );\n};\n\nexport interface GuessLetterProps {\n    letter: string;\n    word: string;\n    guess: string;\n    guessed: boolean;\n}\n\nconst GuessLetter: React.FC<GuessLetterProps> = ({\n    guessed,\n    letter,\n    guess,\n    word,\n}) => {\n    const [isInWord, setIsInWord] = useState(false);\n    const [isInPlace, setIsInPlace] = useState(false);\n\n    useEffect(() => {\n        if (guessed) {\n            if (word.includes(letter)) {\n                setIsInWord(true);\n                if (word.indexOf(letter) === guess.indexOf(letter)) {\n                    setIsInPlace(true);\n                }\n            }\n        }\n    }, [guessed, guess, letter, word]);\n\n    return (\n        <div\n            className=\"button-border\"\n            style={Object.assign(\n                {},\n                styles.guessLetterBox,\n                isInWord && { backgroundColor: 'yellow' },\n                isInPlace && { backgroundColor: 'lightgreen' },\n                !guessed && { backgroundColor: 'white' },\n                letter === ' ' && styles.emptyBox\n            )}\n        >\n            <h3>\n                <b>{letter.toUpperCase()}</b>\n            </h3>\n        </div>\n    );\n};\n\nexport interface GuessWordProps {\n    guess: string;\n    guesses: string[];\n    word: string;\n    active: boolean;\n    noClear?: boolean;\n}\n\nconst GuessWord: React.FC<GuessWordProps> = ({\n    guess,\n    guesses,\n    word,\n    active,\n    noClear,\n}) => {\n    const [savedGuess, setSavedGuess] = useState(guess);\n    const controls = useAnimation();\n\n    useEffect(() => {\n        if (active) {\n            setSavedGuess(guess);\n            if (\n                guess.length === word.length &&\n                !WORDS.includes(guess.toLowerCase())\n            ) {\n                controls\n                    .start({\n                        backgroundColor: '#f00',\n                        x: 2,\n                        transition: {\n                            duration: 0.1,\n                        },\n                    })\n                    .then(() => {\n                        controls\n                            .start({\n                                x: -4,\n                                backgroundColor: '#fff',\n                                transition: {\n                                    duration: 0.1,\n                                },\n                            })\n                            .then(() => {\n                                controls.start({\n                                    x: 0,\n                                    backgroundColor: '#fff',\n                                    transition: {\n                                        duration: 0.09,\n                                    },\n                                });\n                            });\n                    });\n            }\n        }\n    }, [guess, active, word, controls]);\n\n    useEffect(() => {\n        if (guesses.length === 0 && !noClear) setSavedGuess('');\n    }, [guesses, noClear]);\n\n    return (\n        <motion.div animate={controls} style={styles.guessWordRow}>\n            {savedGuess.split('').map((letter, index) => (\n                <GuessLetter\n                    guessed={!active}\n                    key={index}\n                    letter={letter}\n                    guess={savedGuess}\n                    word={word}\n                />\n            ))}\n            {[...Array(word.length - savedGuess.length)].map((e, i) => (\n                <GuessLetter\n                    guessed={!active}\n                    key={i}\n                    letter={' '}\n                    guess={savedGuess}\n                    word={word}\n                />\n            ))}\n        </motion.div>\n    );\n};\n\nexport interface WordleProps {}\n\nconst TOP_ROW = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'];\nconst MIDDLE_ROW = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'];\nconst BOTTOM_ROW = ['RET', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'DEL'];\nconst ROWS = [TOP_ROW, MIDDLE_ROW, BOTTOM_ROW];\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nconst Wordle: React.FC<WordleProps> = () => {\n    const word = 'LUKE';\n    const [guesses, setGuesses] = useState<string[]>([]);\n    const [gameOver, setGameOver] = useState(false);\n    const [won, setWon] = useState(false);\n    const [currentGuess, setCurrentGuess] = useState('');\n\n    const restart = () => {\n        setGuesses([]);\n        setGameOver(false);\n        setTimeout(() => {\n            setWon(false);\n        }, 500);\n        setCurrentGuess('');\n    };\n\n    // listen to keyboard events\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === 'Backspace') {\n                setCurrentGuess(currentGuess.slice(0, -1));\n            } else if (event.key === 'Enter') {\n                if (currentGuess.length === word.length) {\n                    if (WORDS.includes(currentGuess.toLowerCase())) {\n                        setGuesses([...guesses, currentGuess]);\n                        setCurrentGuess('');\n                    }\n                }\n            } else if (\n                event.key.length === 1 &&\n                ALPHABET.includes(event.key.toUpperCase())\n            ) {\n                if (currentGuess.length < word.length) {\n                    setCurrentGuess(currentGuess + event.key.toUpperCase());\n                }\n            }\n        };\n        // add listener\n        window.addEventListener('keydown', handleKeyDown);\n        // cleanup listener\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [guesses, currentGuess]);\n\n    useEffect(() => {\n        if (guesses.length === 6) {\n            setGameOver(true);\n        }\n        guesses.forEach((guess) => {\n            if (guess === word) {\n                setGameOver(true);\n                setWon(true);\n            }\n        });\n    }, [guesses]);\n\n    return (\n        <div style={styles.container}>\n            <div style={styles.header}>\n                <h2>Henordle</h2>\n                <p>Wordle but with a Luke based twist.</p>\n            </div>\n            <motion.div\n                variants={gameOverAnimations}\n                animate={gameOver ? 'show' : 'hidden'}\n                initial={false}\n                style={Object.assign(\n                    {},\n                    styles.gameOverContainer,\n                    gameOver && { zIndex: 1000 }\n                )}\n            >\n                <h2>{won ? 'You win!' : 'Game Over'}</h2>\n                <p>Thanks for playing! Remember: the word is always \"LUKE\"!</p>\n                <br />\n                <GuessWord\n                    key={'winning-guess'}\n                    guess={word}\n                    word={word}\n                    guesses={guesses}\n                    active={false}\n                    noClear={true}\n                />\n                <br />\n                <div className=\"site-button\" onMouseDown={restart}>\n                    Restart Game\n                </div>\n            </motion.div>\n            <motion.div\n                variants={gameAnimations}\n                animate={!gameOver ? 'show' : 'hidden'}\n                initial={false}\n                style={styles.gameContainer}\n            >\n                <div style={styles.playArea}>\n                    {[...Array(6)].map((e, i) => (\n                        <GuessWord\n                            key={i}\n                            guess={currentGuess}\n                            word={word}\n                            guesses={guesses}\n                            active={i === guesses.length}\n                        />\n                    ))}\n                </div>\n                <div style={styles.keyboardContainer}>\n                    {ROWS.map((row) => (\n                        <div style={styles.keyboardRow} key={`row-${row[0]}`}>\n                            {row.map((letter) => (\n                                <KeyboardLetter\n                                    key={letter}\n                                    word={word}\n                                    setGuesses={setGuesses}\n                                    guesses={guesses}\n                                    letter={letter}\n                                    currentGuess={currentGuess}\n                                    setCurrentGuess={setCurrentGuess}\n                                />\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </motion.div>\n        </div>\n    );\n};\n\nconst gameAnimations = {\n    hidden: {\n        opacity: 0,\n        y: -12,\n        transition: {\n            duration: 0.5,\n        },\n    },\n    show: {\n        y: 0,\n        opacity: 1,\n        transition: {\n            delay: 0.5,\n            duration: 0.5,\n        },\n    },\n};\n\nconst gameOverAnimations = {\n    hidden: {\n        opacity: 0,\n        y: 32,\n        transition: {\n            duration: 0.5,\n        },\n    },\n    show: {\n        opacity: 1,\n        y: 0,\n        transition: {\n            delay: 0.4,\n            duration: 0.5,\n            ease: Easing.expOut,\n        },\n    },\n};\n\nconst styles: StyleSheetCSS = {\n    container: {\n        flex: 1,\n        flexDirection: 'column',\n        overflowY: 'scroll',\n    },\n    gameContainer: {\n        flex: 1,\n        flexDirection: 'column',\n    },\n    gameOverContainer: {\n        zIndex: -1000,\n        textAlign: 'center',\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#fff',\n    },\n    header: {\n        flexShrink: 1,\n        paddingTop: 32,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    keyboardContainer: {\n        flexShrink: 1,\n\n        paddingBottom: 24,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    playArea: {\n        flex: 1,\n        flexDirection: 'column',\n\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 16,\n        marginBottom: 16,\n    },\n    letterBox: {\n        padding: 12,\n        paddingTop: 16,\n        minWidth: 42,\n\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingBottom: 16,\n        margin: 4,\n    },\n    keyboardRow: {},\n    guessLetterBox: {\n        width: 60,\n        height: 60,\n        justifyContent: 'center',\n        alignItems: 'center',\n\n        margin: 4,\n    },\n    guessWordRow: {},\n    emptyBox: {\n        border: '2px solid gray',\n        backgroundColor: 'white',\n        boxShadow: 'none',\n    },\n};\n\nexport default Wordle;\n"]},"metadata":{},"sourceType":"module"}