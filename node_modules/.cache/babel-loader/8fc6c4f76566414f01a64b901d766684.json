{"ast":null,"code":"import { useBoolean } from '../useBoolean';\nimport { useCounter } from '../useCounter';\nimport { useInterval } from '../useInterval';\n\nfunction useCountdown(_ref) {\n  let {\n    seconds,\n    interval,\n    isIncrement\n  } = _ref;\n  const {\n    count,\n    increment,\n    decrement,\n    reset: resetCounter\n  } = useCounter(seconds);\n  const {\n    value: running,\n    setTrue: start,\n    setFalse: stop\n  } = useBoolean(false);\n\n  const reset = () => {\n    stop();\n    resetCounter();\n  };\n\n  useInterval(isIncrement ? increment : decrement, running ? interval : null);\n  return [count, {\n    start,\n    stop,\n    reset\n  }];\n}\n\nexport default useCountdown;","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA2B,eAA3B;AAEA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,WAAT,QAA4B,gBAA5B;;AAoBA,SAASC,YAAT,OAImB;AAAA,MAJG;AACpBC,WADoB;AAEpBC,YAFoB;AAGpBC;AAHoB,GAIH;AACjB,QAAM;AACJC,SADI;AAEJC,aAFI;AAGJC,aAHI;AAIJC,SAAK,EAAEC;AAJH,MAKFV,UAAU,CAACG,OAAD,CALd;AAYA,QAAM;AAAEQ,SAAK,EAAEC,OAAT;AAAkBC,WAAO,EAAEC,KAA3B;AAAkCC,YAAQ,EAAEC;AAA5C,MAAqDjB,UAAU,CAAC,KAAD,CAArE;;AAKA,QAAMU,KAAK,GAAG,MAAK;AACjBO,QAAI;AACJN,gBAAY;AACb,GAHD;;AAKAT,aAAW,CAACI,WAAW,GAAGE,SAAH,GAAeC,SAA3B,EAAsCI,OAAO,GAAGR,QAAH,GAAc,IAA3D,CAAX;AACA,SAAO,CAACE,KAAD,EAAQ;AAAEQ,SAAF;AAASE,QAAT;AAAeP;AAAf,GAAR,CAAP;AACD;;AAED,eAAeP,YAAf","names":["useBoolean","useCounter","useInterval","useCountdown","seconds","interval","isIncrement","count","increment","decrement","reset","resetCounter","value","running","setTrue","start","setFalse","stop"],"sources":["/Users/hyeonminsong/developer/Three.js/portfolio-inner-site/node_modules/usehooks-ts/src/useCountdown/useCountdown.ts"],"sourcesContent":["// See: https://usehooks-ts.com/react-hook/use-boolean\nimport { useBoolean } from '../useBoolean'\n// See: https://usehooks-ts.com/react-hook/use-counter\nimport { useCounter } from '../useCounter'\n// See: https://usehooks-ts.com/react-hook/use-interval\nimport { useInterval } from '../useInterval'\n\ninterface UseCountdownType {\n  seconds: number\n  interval: number\n  isIncrement?: boolean\n}\ninterface CountdownHelpers {\n  start: () => void\n  stop: () => void\n  reset: () => void\n}\n\n/**\n *\n * @param seconds the countdown's number, generally time seconds\n * @param interval the countdown's interval, milliseconds\n * @param isIncrement determine the countdown is increment, otherwise is decrement\n * @returns\n */\nfunction useCountdown({\n  seconds,\n  interval,\n  isIncrement,\n}: UseCountdownType): [number, CountdownHelpers] {\n  const {\n    count,\n    increment,\n    decrement,\n    reset: resetCounter,\n  } = useCounter(seconds)\n  /**\n   * Note: used to control the useInterval\n   * running: If true, the interval is running\n   * start: Should set running true to trigger interval\n   * stop: Should set running false to remove interval\n   */\n  const { value: running, setTrue: start, setFalse: stop } = useBoolean(false)\n\n  /**\n   * Will set running false and reset the seconds to initial value\n   */\n  const reset = () => {\n    stop()\n    resetCounter()\n  }\n\n  useInterval(isIncrement ? increment : decrement, running ? interval : null)\n  return [count, { start, stop, reset }]\n}\n\nexport default useCountdown\n"]},"metadata":{},"sourceType":"module"}