{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect';\n\nfunction useEventListener(eventName, handler, element) {\n  const savedHandler = useRef(handler);\n  useIsomorphicLayoutEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    const targetElement = element?.current || window;\n\n    if (!(targetElement && targetElement.addEventListener)) {\n      return;\n    }\n\n    const eventListener = event => savedHandler.current(event);\n\n    targetElement.addEventListener(eventName, eventListener);\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element]);\n}\n\nexport default useEventListener;","map":{"version":3,"mappings":"AAAA,SAAoBA,SAApB,EAA+BC,MAA/B,QAA6C,OAA7C;AAGA,SAASC,yBAAT,QAA0C,8BAA1C;;AAeA,SAASC,gBAAT,CAKEC,SALF,EAMEC,OANF,EASEC,OATF,EASwB;AAGtB,QAAMC,YAAY,GAAGN,MAAM,CAACI,OAAD,CAA3B;AAEAH,2BAAyB,CAAC,MAAK;AAC7BK,gBAAY,CAACC,OAAb,GAAuBH,OAAvB;AACD,GAFwB,EAEtB,CAACA,OAAD,CAFsB,CAAzB;AAIAL,WAAS,CAAC,MAAK;AAEb,UAAMS,aAAa,GAAeH,OAAO,EAAEE,OAAT,IAAoBE,MAAtD;;AACA,QAAI,EAAED,aAAa,IAAIA,aAAa,CAACE,gBAAjC,CAAJ,EAAwD;AACtD;AACD;;AAGD,UAAMC,aAAa,GAAmBC,KAAK,IAAIN,YAAY,CAACC,OAAb,CAAqBK,KAArB,CAA/C;;AAEAJ,iBAAa,CAACE,gBAAd,CAA+BP,SAA/B,EAA0CQ,aAA1C;AAGA,WAAO,MAAK;AACVH,mBAAa,CAACK,mBAAd,CAAkCV,SAAlC,EAA6CQ,aAA7C;AACD,KAFD;AAGD,GAhBQ,EAgBN,CAACR,SAAD,EAAYE,OAAZ,CAhBM,CAAT;AAiBD;;AAED,eAAeH,gBAAf","names":["useEffect","useRef","useIsomorphicLayoutEffect","useEventListener","eventName","handler","element","savedHandler","current","targetElement","window","addEventListener","eventListener","event","removeEventListener"],"sources":["/Users/hyeonminsong/developer/Three.js/portfolio-inner-site/node_modules/usehooks-ts/src/useEventListener/useEventListener.ts"],"sourcesContent":["import { RefObject, useEffect, useRef } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-isomorphic-layout-effect\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect'\n\nfunction useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  handler: (event: WindowEventMap[K]) => void,\n): void\nfunction useEventListener<\n  K extends keyof HTMLElementEventMap,\n  T extends HTMLElement = HTMLDivElement,\n>(\n  eventName: K,\n  handler: (event: HTMLElementEventMap[K]) => void,\n  element: RefObject<T>,\n): void\n\nfunction useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap,\n  T extends HTMLElement | void = void,\n>(\n  eventName: KW | KH,\n  handler: (\n    event: WindowEventMap[KW] | HTMLElementEventMap[KH] | Event,\n  ) => void,\n  element?: RefObject<T>,\n) {\n  // Create a ref that stores handler\n  const savedHandler = useRef(handler)\n\n  useIsomorphicLayoutEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n\n  useEffect(() => {\n    // Define the listening target\n    const targetElement: T | Window = element?.current || window\n    if (!(targetElement && targetElement.addEventListener)) {\n      return\n    }\n\n    // Create event listener that calls handler function stored in ref\n    const eventListener: typeof handler = event => savedHandler.current(event)\n\n    targetElement.addEventListener(eventName, eventListener)\n\n    // Remove event listener on cleanup\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener)\n    }\n  }, [eventName, element])\n}\n\nexport default useEventListener\n"]},"metadata":{},"sourceType":"module"}