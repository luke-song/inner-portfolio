{"ast":null,"code":"import { useEventListener } from '../useEventListener';\n\nfunction useOnClickOutside(ref, handler) {\n  let mouseEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'mousedown';\n  useEventListener(mouseEvent, event => {\n    const el = ref?.current;\n\n    if (!el || el.contains(event.target)) {\n      return;\n    }\n\n    handler(event);\n  });\n}\n\nexport default useOnClickOutside;","map":{"version":3,"mappings":"AAEA,SAASA,gBAAT,QAAiC,qBAAjC;;AAIA,SAASC,iBAAT,CACEC,GADF,EAEEC,OAFF,EAGmD;AAAA,MAAjDC,UAAiD,uEAAX,WAAW;AAEjDJ,kBAAgB,CAACI,UAAD,EAAaC,KAAK,IAAG;AACnC,UAAMC,EAAE,GAAGJ,GAAG,EAAEK,OAAhB;;AAGA,QAAI,CAACD,EAAD,IAAOA,EAAE,CAACE,QAAH,CAAYH,KAAK,CAACI,MAAlB,CAAX,EAA8C;AAC5C;AACD;;AAEDN,WAAO,CAACE,KAAD,CAAP;AACD,GATe,CAAhB;AAUD;;AAED,eAAeJ,iBAAf","names":["useEventListener","useOnClickOutside","ref","handler","mouseEvent","event","el","current","contains","target"],"sources":["/Users/hyeonminsong/developer/Three.js/portfolio-inner-site/node_modules/usehooks-ts/src/useOnClickOutside/useOnClickOutside.ts"],"sourcesContent":["import { RefObject } from 'react'\n\nimport { useEventListener } from '../useEventListener'\n\ntype Handler = (event: MouseEvent) => void\n\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: RefObject<T>,\n  handler: Handler,\n  mouseEvent: 'mousedown' | 'mouseup' = 'mousedown',\n): void {\n  useEventListener(mouseEvent, event => {\n    const el = ref?.current\n\n    // Do nothing if clicking ref's element or descendent elements\n    if (!el || el.contains(event.target as Node)) {\n      return\n    }\n\n    handler(event)\n  })\n}\n\nexport default useOnClickOutside\n"]},"metadata":{},"sourceType":"module"}