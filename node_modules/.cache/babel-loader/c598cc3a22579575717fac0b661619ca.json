{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useEventListener } from '../useEventListener';\n\nfunction useReadLocalStorage(key) {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return null;\n    }\n  }, [key]);\n  const [storedValue, setStoredValue] = useState(readValue);\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue());\n  }, [readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('local-storage', handleStorageChange);\n  return storedValue;\n}\n\nexport default useReadLocalStorage;","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SAASC,gBAAT,QAAiC,qBAAjC;;AAIA,SAASC,mBAAT,CAAgCC,GAAhC,EAA2C;AAGzC,QAAMC,SAAS,GAAGN,WAAW,CAAC,MAAe;AAE3C,QAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,aAAO,IAAP;AACD;;AAED,QAAI;AACF,YAAMC,IAAI,GAAGD,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb;AACA,aAAOG,IAAI,GAAIG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAJ,GAA6B,IAAxC;AACD,KAHD,CAGE,OAAOK,KAAP,EAAc;AACdC,aAAO,CAACC,IAAR,CAAa,mCAAmCV,GAAG,IAAnD,EAAyDQ,KAAzD;AACA,aAAO,IAAP;AACD;AACF,GAb4B,EAa1B,CAACR,GAAD,CAb0B,CAA7B;AAiBA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAWI,SAAX,CAA9C;AAGAL,WAAS,CAAC,MAAK;AACbgB,kBAAc,CAACX,SAAS,EAAV,CAAd;AAED,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMY,mBAAmB,GAAGlB,WAAW,CAAC,MAAK;AAC3CiB,kBAAc,CAACX,SAAS,EAAV,CAAd;AACD,GAFsC,EAEpC,CAACA,SAAD,CAFoC,CAAvC;AAKAH,kBAAgB,CAAC,SAAD,EAAYe,mBAAZ,CAAhB;AAIAf,kBAAgB,CAAC,eAAD,EAAkBe,mBAAlB,CAAhB;AAEA,SAAOF,WAAP;AACD;;AAED,eAAeZ,mBAAf","names":["useCallback","useEffect","useState","useEventListener","useReadLocalStorage","key","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","handleStorageChange"],"sources":["/Users/hyeonminsong/developer/Three.js/portfolio-inner-site/node_modules/usehooks-ts/src/useReadLocalStorage/useReadLocalStorage.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n\ntype Value<T> = T | null\n\nfunction useReadLocalStorage<T>(key: string): Value<T> {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = useCallback((): Value<T> => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return null\n    }\n\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? (JSON.parse(item) as T) : null\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error)\n      return null\n    }\n  }, [key])\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<Value<T>>(readValue)\n\n  // Listen if localStorage changes\n  useEffect(() => {\n    setStoredValue(readValue())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue())\n  }, [readValue])\n\n  // this only works for other documents, not the current one\n  useEventListener('storage', handleStorageChange)\n\n  // this is a custom event, triggered in writeValueToLocalStorage\n  // See: useLocalStorage()\n  useEventListener('local-storage', handleStorageChange)\n\n  return storedValue\n}\n\nexport default useReadLocalStorage\n"]},"metadata":{},"sourceType":"module"}