{"ast":null,"code":"import { useLocalStorage } from '../useLocalStorage';\nimport { useMediaQuery } from '../useMediaQuery';\nimport { useUpdateEffect } from '../useUpdateEffect';\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\n\nfunction useDarkMode(defaultValue) {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n  const [isDarkMode, setDarkMode] = useLocalStorage('usehooks-ts-dark-mode', defaultValue ?? isDarkOS ?? false);\n  useUpdateEffect(() => {\n    setDarkMode(isDarkOS);\n  }, [isDarkOS]);\n  return {\n    isDarkMode,\n    toggle: () => setDarkMode(prev => !prev),\n    enable: () => setDarkMode(true),\n    disable: () => setDarkMode(false)\n  };\n}\n\nexport default useDarkMode;","map":{"version":3,"mappings":"AACA,SAASA,eAAT,QAAgC,oBAAhC;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,MAAMC,kBAAkB,GAAG,8BAA3B;;AASA,SAASC,WAAT,CAAqBC,YAArB,EAA2C;AACzC,QAAMC,QAAQ,GAAGL,aAAa,CAACE,kBAAD,CAA9B;AACA,QAAM,CAACI,UAAD,EAAaC,WAAb,IAA4BR,eAAe,CAC/C,uBAD+C,EAE/CK,YAAY,IAAIC,QAAhB,IAA4B,KAFmB,CAAjD;AAMAJ,iBAAe,CAAC,MAAK;AACnBM,eAAW,CAACF,QAAD,CAAX;AAED,GAHc,EAGZ,CAACA,QAAD,CAHY,CAAf;AAKA,SAAO;AACLC,cADK;AAELE,UAAM,EAAE,MAAMD,WAAW,CAACE,IAAI,IAAI,CAACA,IAAV,CAFpB;AAGLC,UAAM,EAAE,MAAMH,WAAW,CAAC,IAAD,CAHpB;AAILI,WAAO,EAAE,MAAMJ,WAAW,CAAC,KAAD;AAJrB,GAAP;AAMD;;AAED,eAAeJ,WAAf","names":["useLocalStorage","useMediaQuery","useUpdateEffect","COLOR_SCHEME_QUERY","useDarkMode","defaultValue","isDarkOS","isDarkMode","setDarkMode","toggle","prev","enable","disable"],"sources":["/Users/hyeonminsong/developer/Three.js/portfolio-inner-site/node_modules/usehooks-ts/src/useDarkMode/useDarkMode.ts"],"sourcesContent":["// See: https://usehooks-ts.com/react-hook/use-local-storage\nimport { useLocalStorage } from '../useLocalStorage'\n// See: https://usehooks-ts.com/react-hook/use-media-query\nimport { useMediaQuery } from '../useMediaQuery'\n// See: https://usehooks-ts.com/react-hook/use-update-effect\nimport { useUpdateEffect } from '../useUpdateEffect'\n\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)'\n\ninterface UseDarkModeOutput {\n  isDarkMode: boolean\n  toggle: () => void\n  enable: () => void\n  disable: () => void\n}\n\nfunction useDarkMode(defaultValue?: boolean): UseDarkModeOutput {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY)\n  const [isDarkMode, setDarkMode] = useLocalStorage<boolean>(\n    'usehooks-ts-dark-mode',\n    defaultValue ?? isDarkOS ?? false,\n  )\n\n  // Update darkMode if os prefers changes\n  useUpdateEffect(() => {\n    setDarkMode(isDarkOS)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDarkOS])\n\n  return {\n    isDarkMode,\n    toggle: () => setDarkMode(prev => !prev),\n    enable: () => setDarkMode(true),\n    disable: () => setDarkMode(false),\n  }\n}\n\nexport default useDarkMode\n"]},"metadata":{},"sourceType":"module"}